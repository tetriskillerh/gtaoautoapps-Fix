;==== CONFIG ====
#SingleInstance, Force
#Include %A_ScriptDir%
FileCreateDir, %A_WorkingDir%\logs
FileCreateDir, %A_WorkingDir%\images
FileInstall, images\map_button.bmp, %A_WorkingDir%\images\map_button.bmp, 1 ; map button
FileInstall, images\joining_online_button.bmp, %A_WorkingDir%\images\joining_online_button.bmp, 1 ; joining online
FileInstall, images\browser_tile.png, %A_WorkingDir%\images\browser_tile.png, 1 ; browser tile
FileInstall, images\quick_actions_tile.bmp, %A_WorkingDir%\images\quick_actions_tile.bmp, 1 ; quick actions tile
FileInstall, images\return_to_map_button.bmp, %A_WorkingDir%\images\return_to_map_button.bmp, 1 ; return to map (dynasty 8)
FileInstall, images\retry_continue_buttons.bmp, %A_WorkingDir%\images\retry_continue_buttons.bmp, 1 ; retry/continue buttons
FileInstall, images\trade_in_property_menu.bmp, %A_WorkingDir%\images\trade_in_property_menu.bmp, 1 ; trade in property menu
SetKeyDelay, 130, 1
SetMouseDelay, 70
CoordMode, Pixel, Relative
SetTitleMatchMode, 2
currentVersion := "v0.1.2" ; Current script version
debugShow := 0 ; 0 = OFF, 1 = Show NoSave, hold for 2 = Show Debug
slowMode := 0
slowModeDelay := 0
isHoldingNumpad6 := false
numpad6PressTime := 0
isHoldingNumpad9 := false
numpad9PressTime := 0
currentRun := 0
totalRuns := 0
logFilePath := ""

;==== STARTUP ====
if not A_IsAdmin
{
  Run *RunAs "%A_ScriptFullPath%",, UseErrorLevel
  if ErrorLevel != 0
  {
    MsgBox, 48, Error, This script requires administrator privileges! Please run it again with the correct privileges.
    ExitApp
  }
}

initializeLogFile()
checkForUpdates()

;==== HOTKEYS ====
Numpad0:: ; preparation phase start
  debugLog("Numpad0 : pressed")
  Hotkey, Numpad1, Off
  debugLog("Numpad0 : Showing MsgBox")
  MsgBox, 4,, You're going to start "preparation phase"`n!!!WARNING!!!`n You need to have at least $5,000,000 on your GTA Online's bank account!`n!!!WARNING!!!`nDo you want to continue?
  IfMsgBox, Yes
  {
    debugLog("Numpad0(MsgBox) : Yes")
    apartmentsPrep()
    Hotkey, Numpad1, On
  } else {
    debugLog("Numpad0(MsgBox) : No")
    Hotkey, Numpad1, On
  }
Return

Numpad1:: ; payback phase start
  debugLog("Numpad1 : pressed")
  Hotkey, Numpad0, Off
  debugLog("Numpad1 : Showing MsgBox")
  MsgBox, 4,, You're going to start "payback phase"`n!!!WARNING!!!`nMake sure that you've prepared the slots!`n!!!WARNING!!!`nDo you want to continue?
  IfMsgBox, Yes
  {
    debugLog("Numpad1(MsgBox) : Yes")
    apartmentsRun()
    Hotkey, Numpad0, On
  } else {
    debugLog("Numpad1(MsgBox) : No")
    Hotkey, Numpad0, On
  }
Return

Numpad2:: ; panic button: no-save enable
  debugLog("Numpad2 : pressed")
  saveblockEnable()
Return

Numpad3:: ; panic button: no-save disable
  debugLog("Numpad3 : pressed")
  saveblockDisable()
Return

Numpad4:: ; panic button: reload
  debugLog("Numpad4 : pressed")
  saveblockDisable()
  debugLog("Reloading script...")
  Reload
Return

Numpad5:: ; panic button: exit
  debugLog("Numpad5 : pressed")
  saveblockDisable()
  debugLog("Exiting script")
ExitApp
Return

Numpad6:: ; Slow mode cycle toggle
  if (!isHoldingNumpad6)
  {
    isHoldingNumpad6 := true
    numpad6PressTime := A_TickCount
  }
  Loop
  {
    if (!GetKeyState("Numpad6", "P"))
    {
      if (A_TickCount - numpad6PressTime < 500)
      {
        debugLog("Numpad6 : pressed")
        slowModeDelay := (slowModeDelay + 50) > 300 ? 0 : slowModeDelay + 50
        slowMode := (slowModeDelay > 0)
        showToolTip(slowModeDelay > 0 ? "Slow mode enabled with " . slowModeDelay . "ms delay" : "Slow mode disabled")
      }
      Break
    }
    if (A_TickCount - numpad6PressTime > 500)
    {
      debugLog("Numpad6 : held")
      slowModeDelay := 0
      slowMode := 0
      showToolTip("Slow mode disabled")
      isHoldingNumpad6 := false
      Loop
      {
        if (!GetKeyState("Numpad6", "P"))
          Break
        Sleep, 10
      }
      Return
    }
    Sleep, 10
  }
  isHoldingNumpad6 := false
Return

Numpad9:: ; Toggle debug status display (0 = OFF, 1 = Show NoSave, hold for 2 = Show Debug)
  if (!isHoldingNumpad9)
  {
    isHoldingNumpad9 := true
    numpad9PressTime := A_TickCount
  }
  Loop
  {
    if (!GetKeyState("Numpad9", "P"))
    {
      if (A_TickCount - numpad9PressTime < 500)
      {
        debugLog("Numpad9 : pressed")
        debugShow := (debugShow = 0) ? 1 : 0 ; Toggle between 0 and 1
        showToolTip(debugShow = 1 ? "Show NoSave" : "Debug OFF")
      }
      Break
    }
    if (A_TickCount - numpad9PressTime > 500)
    {
      debugLog("Numpad9 : held")
      debugShow := 2 ; Set to mode 2
      showToolTip("Show Debug")
      isHoldingNumpad9 := false
      Loop
      {
        if (!GetKeyState("Numpad9", "P"))
          Break
        Sleep, 10
      }
      Return
    }
    Sleep, 10
  }
  isHoldingNumpad9 := false
Return

;==== FUNCTIONS ====
apartmentsRun() ; runs "payback phase"
{
  global totalRuns, currentRun
  debugLog("apartmentsRun() : Entering... Showing InputBox")
  InputBox, runsNum,, How many runs?,
  if (ErrorLevel = 1)
  {
    debugLog("apartmentsRun()(InputBox) : Exiting (cancelled)")
    Return
  }
  if (runsNum = "")
  {
    debugLog("apartmentsRun()(Inputbox) : Exiting (no input)")
    Return
  }
  debugLog("apartmentsRun()(InputBox) : User input: " runsNum)
  totaltime := Format("{1:.2f}",((runsNum*80)/60))
  totaltime2 := Format("{1:.2f}",(totaltime/60.0))
  totalPayout := RegExReplace((runsNum*5200000), "(\d)(?=(?:\d{3})+(?:\.|$))", "$1,")
  cashPerMinute := "3,900,000"
  debugLog("apartmentsRun() : Showing MsgBox")
  MsgBox, 4,, Don't press anything after choosing "Yes"!!!`n`nWhole process will take %runsNum% runs -  around %totaltime% minutes(%totaltime2% hours).`n`nYou'll earn around $%totalPayout%.`n`nEstimated $/minute profit: $%cashPerMinute%.`n`n Do you want to continue?
  IfMsgBox, No
  {
    debugLog("apartmentsRun()(MsgBox) : Exiting (cancelled)")
    Return
  }
  debugLog("apartmentsRun()(MsgBox) : Yes")
  totalRuns := runsNum
  WinActivate, Grand Theft Auto V
  qpc(1)
  Loop % runsNum
  {
    currentRun := A_Index
    debugLog("apartmentsRun() : Starting runs")
    if (debugShow != 2)
      ToolTip, Going...(Run %A_index%), 400, 0
    fromSingleToOnline()
    forceSave()
    apartmentsExchange()
    fromOnlineToSingle()
    if (debugShow != 2)
      Tooltip,,
    debugLog("apartmentsRun() : Run complete")
  }
  menuMapChecker()
  timer := Round(qpc(0), 2)
  perRun := Round(timer/runsNum, 2)
  saveblockDisable()
  debugLog("apartmentsRun() : Completed. Time passed: " timer "s. Cash earned: $" totalPayout ".")
  debugLog("apartmentsRun() : Showing MsgBox")
  MsgBox End of the line. Rounds passed: %runsNum%. Time passed: %timer%s. Cash earned: $%totalPayout%. Time per run: %perRun%s.
  debugLog("apartmentsRun()(MsgBox) : OK")
  DebugLog("apartmentsRun() : Exiting")
  totalRuns := 0
  currentRun := 0
}

apartmentsPrep() ; runs preparation phase
{
  debugLog("apartmentsPrep() : Entering... Showing MsgBox")
  MsgBox, 4,, Don't press anything after choosing "Yes"!!!`n`nWhole process will take around 15 minutes. Do you want to continue?
  IfMsgBox Yes
  {
    debugLog("apartmentsPrep()(MsgBox) : Yes")
    prepTime()
  }
  debugLog("apartmentsPrep()(MsgBox) : Exiting (cancelled)")
}

apartmentsExchange() ; trades in apartments into the cheapest one
{
  debugLog("apartmentsExchange() : Entering")
  tradeButtonY := 80
  pullUpPhone()
  enterBrowser()
  enterDynastyEstate()
  Loop
  {
    buyTrashBlocker()

    if (tradeInChecker() = 0)
      Break

    MouseMove, 260, 110, 0
    Click
    Sleep 200
    enterDynastyEstate()
  }
  Loop
  {
    pressKey("Enter", 50, 2, 0)
    if (returnToMapChecker() = 0)
      Break
  }
  returnToMapPress()
  Loop, 9
  {
    counter := A_Index + 1
    Loop
    {
      buyTrash()

      if (tradeInChecker() = 0)
        Break

      MouseMove, 260, 110, 0
      Click
      Sleep 200
      enterDynastyEstate()
    }
    tradeButtonY := tradeButtonY + 27
    MouseMove, 70, tradeButtonY, 0
    MouseMove, 70, tradeButtonY, 0
    Click
    Loop
    {
      pressKey("Enter", 50, 2, 0)
      if (returnToMapChecker() = 0)
        Break
    }
    if (A_Index < 9)
      returnToMapPress()
  }
  exitBrowser()
  Sleep 150
  DebugLog("apartmentsExchange() : Exiting")
}

prepTime() ; prepares all apartment slots
{
  debugLog("prepTime() : Entering")
  WinActivate, Grand Theft Auto V
  qpc(1)
  tradeButtonY := 80
  Loop, 10
  {
    debugLog("[Prep " A_Index "/10] : preptime() : start")
    if (debugShow != 2)
      Tooltip, Preparing apartment no.(%A_Index%), 400, 0
    fromSingleToOnline()
    forceSave()
    Sleep 50
    pullUpPhone()
    enterBrowser()
    enterDynastyEstate()
    Loop
    {
      buyEclipse()
      if (tradeInChecker() = 0)
        Break
      MouseMove, 260, 110, 0
      Click
      Sleep 200
      enterDynastyEstate()
    }
    MouseMove, 70, tradeButtonY, 0
    MouseMove, 70, tradeButtonY, 0
    Click
    Loop
    {
      pressKey("Enter", 50, 2, 0)
      if (returnToMapChecker() = 0)
        Break
    }
    Sleep 400
    exitBrowser()
    pullUpPhone()
    enterBrowser()
    enterDynastyEstate()
    Loop
    {
      buyTrashBlocker()
      if (tradeInChecker() = 0)
        Break
      MouseMove, 260, 110, 0
      Click
      Sleep 200
      enterDynastyEstate()
    }
    MouseMove, 70, tradeButtonY, 0
    MouseMove, 70, tradeButtonY, 0
    Click
    Loop
    {
      pressKey("Enter", 50, 2, 0)
      if (returnToMapChecker() = 0)
        Break
    }
    tradeButtonY := tradeButtonY + 27
    exitBrowser()
    Sleep 150
    fromOnlineToSingle()
    if (debugShow != 2)
      Tooltip,,
    debugLog("[Prep " A_Index "/10] : preptime() : complete")
  }
  menuMapChecker()
  timer := Round(qpc(0), 2)
  debugLog("prepTime() : Completed. Time passed: " timer "s.")
  debugLog("prepTime() : Showing MsgBox")
  MsgBox, time needed: %timer%
  debugLog("prepTime()(MsgBox) : OK")
  debugLog("prepTime() : Exiting")
}

pressKey(button, pressTime, presses, sleepTime)
{
  debugLog("pressKey(" button ") : Entering")
  if (presses = 1) {
    SendInput, {%button% down}
    Sleep %pressTime%
    SendInput, {%button% up}
    Sleep %sleepTime%
  } else {
    Loop, %presses%
    {
      SendInput, {%button% down}
      Sleep %pressTime%
      SendInput, {%button% up}
      if (presses > 1)
        Sleep 100
      Sleep %sleepTime%
    }
  }
  debugLog("pressKey(" button ") : Exiting")
}

fromSingleToOnline()
{
  debugLog("fromSingleToOnline() : Entering")
  SetMouseDelay, 60
  result := 1
  Loop
  {
    menuMapChecker()
    MouseMove, 913, 172, 0
    Click
    Sleep 700
    pressKey("Up", 50, 1, 150)
    pressKey("Enter", 50, 1, 150)
    pressKey("Up", 50, 1, 150)
    Critical
    saveblockDisable()
    Critical, Off
    pressKey("Enter", 60, 2, 100)
    Loop
    {
      ImageSearch, FoundX, FoundY, 867, 766, 984, 783, *80 %A_WorkingDir%\images\joining_online_button.bmp
      if (ErrorLevel = 0)
      {
        result := 0
        Break
      }
      ImageSearch, FoundX, FoundY, 831, 747, 1023, 795, *50 %A_WorkingDir%\images\retry_continue_buttons.bmp
      if (ErrorLevel = 0)
      {
        Critical
        saveblockDisable()
        Critical, Off
        Sleep 4000
        pressKey("Space", 500, 1, 0)
        result := 0
        Break
      }
    }
    if (result = 0)
      Break
  }
  debugLog("fromSingleToOnline() : Exiting")
}

menuMapChecker()
{
  debugLog("menuMapChecker() : Entering")
  failedAttempts := 0
  Loop
  {
    pressKey("Esc", 50, 1, 370)
    ImageSearch, FoundX, FoundY, 0, 0, 165, 182, *100 %A_WorkingDir%\images\map_button.bmp
    if (ErrorLevel = 0)
    {
      failedAttempts := 0
      Return
    }
    failedAttempts++
    debugLog("menuMapChecker() : Attempt " failedAttempts " failed")
    if (failedAttempts >= 10)
    {
      unbreakMenu()
      failedAttempts := 0
    }
  }
  debugLog("menuMapChecker() : Exiting")
}

unbreakMenu()
{
  debugLog("unbreakMenu() : Entering")
  pressKey("Esc", 50, 1, 150)
  Sleep 100
  pressKey("Up", 50, 1, 150)
  Sleep 100
  Loop, 5
  {
    pressKey("Esc", 50, 1, 150)
    Sleep 100
  }
  debugLog("unbreakMenu() : Exiting")
}

fromOnlineToSingle()
{
  debugLog("fromOnlineToSingle() : Entering")
  debugLog("fromOnlineToSingle() : Switching to singleplayer")
  SendInput, {Alt down}
  pressKey("F6", 500, 1, 0)
  SendInput, {Alt up}
  Sleep 30
  Loop
  {
    iteration++
    PixelGetColor, color, 831, 747
    if (color = 0x000000)
    {
      pressKey("Enter", 500, 1, 0)
      debugLog("fromOnlineToSingle() : Transition to singleplayer complete at iteration " iteration)
      break
    }
    debugLog("fromOnlineToSingle() : Waiting iteration " iteration)
    Sleep, 100
  }
  debugLog("fromOnlineToSingle() : Exiting")
}

saveblockEnable() ; enable no-save mode
{
  debugLog("saveblockEnable() : Entering")
  global debugShow
  RunWait %comspec% /c "netsh advfirewall firewall add rule name=GTAOSAVEBLOCK dir=out action=block remoteip=192.81.241.170-192.81.241.171 enable=yes" ,,Hide
  if (debugShow = 1) ; Show tooltip only if debugShow is set to 1 (Show No Save)
    showToolTip("NO SAVING MODE ON")
  debugLog("saveblockEnable() : Exiting")
}

saveblockDisable() ; disable no-save mode
{
  debugLog("saveblockDisable() : Entering")
  global debugShow
  RunWait %comspec% /c "netsh advfirewall firewall delete rule name=GTAOSAVEBLOCK" ,,Hide
  if (debugShow = 1) ; Show tooltip only if debugShow is set to 1 (Show No Save)
    showToolTip("NO SAVING MODE OFF")
  debugLog("saveblockDisable() : Exiting")
}

pullUpPhone()
{
  debugLog("pullUpPhone() : Entering")
  Loop
  {
    Loop, 50
    {
      pressKey("MButton", 1, 1, 50)
      ImageSearch, FoundX, FoundY, 920, 647, 943, 672, *80 %A_WorkingDir%\images\quick_actions_tile.bmp
      if (ErrorLevel = 0)
      {
        debugLog("pullUpPhone() : Exiting (phone detected)")
        Return
      }
      Sleep 100
    }
    menuMapChecker()
    pressKey("Esc", 50, 1, 370)
    Sleep 200
  }
  DebugLog("PullUpPhone() : Exiting")
}

enterBrowser()
{
  debugLog("enterBrowser() : Entering")
  Loop
  {
    pressKey("Down", 50, 1, 50)
    ImageSearch, FoundX, FoundY, 914, 696, 948, 729, *100 %A_WorkingDir%\images\browser_tile.png
    if (ErrorLevel = 0)
    {
      Sleep 30
      pressKey("Enter", 50, 1, 600)
      debugLog("enterBrowser() : Exiting (browser detected)")
      Return
    }
  }
  debugLog("enterBrowser() : Exiting")
}

enterDynastyEstate()
{
  debugLog("enterDynastyEstate() : Entering")
  global slowMode, slowModeDelay
  extraSleep := slowMode ? slowModeDelay : 0
  Sleep 100 + extraSleep
  MouseMove, 255, 590, 0
  Sleep 60 + extraSleep
  Click
  MouseMove, 310, 450, 1
  Sleep 200 + extraSleep
  Click
  debugLog("enterDynastyEstate() : Exiting")
}

buyEclipse()
{
  debugLog("buyEclipse() : Entering")
  global slowMode, slowModeDelay
  extraSleep := slowMode ? slowModeDelay : 0
  MouseMove, 240, 270, 0
  Click
  Sleep 100 + extraSleep
  MouseMove, 310, 270, 0
  Click
  Sleep 100 + extraSleep
  MouseMove, 300, 400, 0
  Click
  Sleep 120 + extraSleep
  MouseMove, 780, 600, 0
  Click
  Sleep 100 + extraSleep
  pressKey("WheelDown", 10, 3, 10)
  MouseMove, 760, 720, 0
  Sleep 50 + extraSleep
  Click
  debugLog("buyEclipse() : Exiting")
}

tradeInChecker()
{
  debugLog("tradeInChecker() : Entering")
  Loop, 50
  {
    ImageSearch, FoundX, FoundY, 27, 49, 150, 66, *80 %A_WorkingDir%\images\trade_in_property_menu.bmp
    if (ErrorLevel = 0)
      debugLog("tradeInChecker() : Exiting (menu found)")
    Return 0
    Sleep 100
  }
  debugLog("tradeInChecker() : Exiting (timeout)")
  Return 1
}

exitBrowser()
{
  debugLog("exitBrowser() : Entering")
  MouseMove, 842, 108, 0
  Click
  Sleep 300
  debugLog("exitBrowser() : Exiting")
}

buyTrash()
{
  debugLog("buyTrash() : Entering")
  global slowMode, slowModeDelay
  extraSleep := slowMode ? slowModeDelay : 0
  MouseMove, 310, 270, 0
  Click
  Sleep 100 + extraSleep
  MouseMove, 240, 270, 0
  Click
  Sleep 100 + extraSleep
  MouseMove, 300, 400, 0
  Click
  Sleep 120 + extraSleep
  MouseMove, 750, 600, 0
  Sleep 50 + extraSleep
  Click
  debugLog("buyTrash() : Exiting")
}

buyTrashBlocker()
{
  debugLog("buyTrashBlocker() : Entering")
  buyTrash()
  Critical
  saveblockEnable()
  Sleep 300
  Critical, Off
  debugLog("buyTrashBlocker() : Exiting")
}

returnToMapChecker()
{
  debugLog("returnToMapChecker() : Entering")
  Loop
  {
    ImageSearch, FoundX, FoundY, 414, 621, 573, 646, *50 %A_WorkingDir%\images\return_to_map_button.bmp
    if (ErrorLevel = 0)
      Break
    Sleep 100
  }
  debugLog("returnToMapChecker() : Exiting")
  Return 0
}

returnToMapPress()
{
  debugLog("returnToMapPress() : Entering")
  MouseMove, 500, 630, 1
  Click
  Sleep 300
  debugLog("returnToMapPress() : Exiting")
}

qpc( R := 0 )
{
  ; By SKAN,  http://goo.gl/nf7O4G,  CD:01/Sep/2014 | MD:01/Sep/2014
  Static P := 0,  F := 0,     Q := DllCall( "QueryPerformanceFrequency", "Int64P",F )
  Return ! DllCall( "QueryPerformanceCounter","Int64P",Q ) + ( R ? (P:=Q)/F : (Q-P)/F )
}

showToolTip(message)
{
  global debugShow
  debugLog("showToolTip() : " message)
  if (debugShow = 2)
    Return
  ToolTip, %message%, 10, 10
  SetTimer, removeToolTip, -3000
}

removeToolTip()
{
  ToolTip
}

forceSave()
{
  debugLog("forceSave() : Entering")
  debugLog("forceSave() : Searching ""joining online""")
  Loop
  {
    ImageSearch, FoundX, FoundY, 867, 766, 984, 783, *80 %A_WorkingDir%\images\joining_online_button.bmp
    if (ErrorLevel = 0)
      Break
  }
  debugLog("forceSave() : Found ""joining online""")
  debugLog("forceSave() : Waiting for ""black screen""")
  Loop
  {
    PixelGetColor, color, 831, 747
    if (color = 0x000000)
      Break
  }
  debugLog("forceSave() : Waiting for ""black screen"" to disappear")
  Loop
  {
    PixelGetColor, color, 831, 747
    if (color != 0x000000)
      Break
  }
  debugLog("forceSave() : ""black screen"" disappeared")
  debugLog("forceSave() : Searching ""joining online""")
  Loop
  {
    ImageSearch, FoundX, FoundY, 867, 766, 984, 783, *80 %A_WorkingDir%\images\joining_online_button.bmp
    if (ErrorLevel = 0)
      Break
  }
  debugLog("forceSave() : Waiting for ""joining online"" to disappear")
  Loop
  {
    ImageSearch, FoundX, FoundY, 867, 766, 984, 783, *80 %A_WorkingDir%\images\joining_online_button.bmp
    if (ErrorLevel != 0)
      Break
  }
  debugLog("forceSave() : ""joining online"" disappeared")
  debugLog("forceSave() : Initiateing ""Force Save""")
  SendInput, {Alt down}
  pressKey("F4", 500, 1, 0)
  SendInput, {Alt up}
  Sleep 30
  Loop
  {
    PixelGetColor, color, 831, 747
    if (color != 0x000000)
      Break
    pressKey("Esc", 50, 1, 0)
    Sleep, 100
  }
  debugLog("forceSave() : ""Force Save"" complete")
  debugLog("forceSave() : Exiting")
}

;==== UPDATE CHECK ====
checkForUpdates()
{
  debugLog("checkForUpdates() : Entering")
  global currentVersion
  latestVersion := ""
  releaseNotes := ""
  url := "https://api.github.com/repos/tetriskillerh/gtaoautoapps-Fix/releases/latest"
  downloadPage := "https://github.com/tetriskillerh/gtaoautoapps-Fix/releases/latest"
  HttpObj := ComObjCreate("WinHttp.WinHttpRequest.5.1")
  HttpObj.Open("GET", url, false)
  HttpObj.Send()
  if (HttpObj.Status = 200)
  {
    response := HttpObj.ResponseText
    RegExMatch(response, """tag_name"":""(.*?)""", match)
    latestVersion := match1
    RegExMatch(response, """body"":""(.*?)""", matchBody)
    rawNotes := StrReplace(matchBody1, "\r\n", "`n")
    allSections := parseAllSections(rawNotes)
  }
  else
  {
    MsgBox, 48, Update Check Failed, Unable to check for updates. Please ensure you are connected to the internet.
    debugLog("checkForUpdates() : Exiting (failed)")
    Return
  }
  if (latestVersion != "")
  {
    if (compareVersions(currentVersion, latestVersion) > 0)
      showToolTip("Dev Version: You are using a development version.")
    else if (currentVersion != latestVersion)
    {
      debugLog("checkForUpdates() : Showing MsgBox")
      MsgBox, 4, Update Available, A new version (%latestVersion%) is available!`n`nRelease Notes:`n`n%allSections%`n`nDo you want to download it now?
      IfMsgBox, Yes
      {
        debugLog("checkForUpdates()(MsgBox) : Yes")
        Run, %downloadPage%
      }
      debugLog("checkForUpdates()(MsgBox) : No")
    }
  }
  DebugLog("checkForUpdates() : Exiting")
}

parseAllSections(rawNotes)
{
  debugLog("parseAllSections() : Entering")
  sections := ""
  Loop, Parse, rawNotes, `n
  {
    if (RegExMatch(A_LoopField, "^## "))
    {
      sections .= A_LoopField . "`n"
    }
    else if (sections != "" && !RegExMatch(A_LoopField, "^## "))
    {
      sections .= StrReplace(A_LoopField, "---", "") . "`n"
    }
  }
  debugLog("parseAllSections() : Exiting")
  Return sections
}

compareVersions(version1, version2)
{
  debugLog("compareVersions() : Entering")
  RegExMatch(version1, "v(.*)", match1)
  RegExMatch(version2, "v(.*)", match2)
  parts1 := StrSplit(match11, ".")
  parts2 := StrSplit(match21, ".")
  Loop % Max(parts1.Length(), parts2.Length())
  {
    part1 := parts1[A_Index] ? parts1[A_Index] : 0
    part2 := parts2[A_Index] ? parts2[A_Index] : 0
    if (part1 > part2)
    {
      debugLog("compareVersions() : Exiting (Curent version is newer)")
      Return 1
    }
    else if (part1 < part2)
    {
      debugLog("compareVersions() : Exiting (New version available)")
      Return -1
    }
  }
  debugLog("compareVersions() : Exiting (Versions are equal)")
  Return 0
}

;==== DEBUG/LOGGING ====
initializeLogFile()
{
  global logFilePath
  logFilePath := findExistingLogFile()

  if (logFilePath = "")
  {
    FormatTime, timestamp, , yyyy-MM-dd_HH-mm-ss
    logFilePath := A_WorkingDir "\logs\debug_" timestamp ".log"
  }
}

findExistingLogFile()
{
  logDir := A_WorkingDir "\logs"
  logFilePattern := logDir "\debug_*.log"
  lastLogFile := ""
  lastModified := ""
  fileCount := 0

  ; Find the most recent log file
  Loop, Files, %logFilePattern%
  {
    fileCount++
    if (lastModified = "" || A_LoopFileTimeModified > lastModified)
    {
      lastLogFile := A_LoopFileFullPath
      lastModified := A_LoopFileTimeModified
    }
  }

  ; Check if the last non-empty line of the last log file contains "Reloading script..."
  if (lastLogFile != "")
  {
    FileRead, logContent, %lastLogFile%
    logLines := StrSplit(logContent, "`n")
    lastNonEmptyLine := ""
    ; Iterate backward to find the last non-empty line
    Loop % logLines.Length()
    {
      line := logLines[A_Index]
      if (Trim(line) != "")
        lastNonEmptyLine := line
    }
    if (lastNonEmptyLine != "" && InStr(lastNonEmptyLine, "Reloading script..."))
    {
      Return lastLogFile
    }
  }

  Return "" ; No valid log file found
}

debugLog(msg)
{
  global debugShow, currentRun, totalRuns, logFilePath

  if (logFilePath = "")
  {
    static initializing := false
    if (initializing)
      Return
    initializing := true
    initializeLogFile()
    initializing := false
  }
  runStr := totalRuns = 0 ? "" : "[Run " currentRun "/" totalRuns "] : "
  FormatTime, logTimestamp, , yyyy-MM-dd HH:mm:ss
  logEntry := "[" logTimestamp "] " runStr . msg . "`n"
  FileAppend, % logEntry, %logFilePath%
  if (debugShow)
  {
    ToolTip, % runStr . msg, 0, 0
    SetTimer, removeToolTip, -3000
  }
}
